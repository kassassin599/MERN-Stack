                   // 1. Introduction to JavaScript
// What is JavaScript?
// JavaScript is a versatile programming language primarily used for creating interactive and dynamic content on the web. It can be used on both the client-side (in the browser) and server-side (using Node.js).

xample
// Let's start with a simple "H// Hello World Eello, World!" program.

// In the Browser Console
// Open your browser's developer tools (usually by pressing F12 or right-clicking and selecting "Inspect") and go to the "Console" tab. Type the following code and press Enter:

console.log("Hello, World!");




// In an HTML File
// Create an HTML file (e.g., index.html) with the following content:



    <script>
        console.log("Hello, World!");
    </script>




                                    // 2. Basic Syntax
// JavaScript Code Structure
// JavaScript code can be written directly in an HTML file within <script> tags or in a separate .js file.



                                        // Comments
// Comments are used to explain code or to prevent execution.

                                    // Single-line comment:

// This is a single-line comment
console.log("Hello, World!");

                                // Multi-line comment:
/* This is a 
   multi-line comment */
   console.log("Hello, World!");



                        // 3. Variables and Data Types
// Variables
// Variables are used to store data. In JavaScript, you can declare variables using var, let, or const.

                                // var

var a = "this is varrrrrrrrrrrrrrrrrr";
var a = "this is 2nd varrrrrrrrrrrrrrrrrr";
 a = "this is 3rd varrrrrrrrrrrrrrrrrr";

                                    // let
let b = "hello from let";
let b = "hello updated"; // An error in this line
b = "this is udated";
document.write(b + "<br>");

                                    // const
const c = 20;
// const c = 20; //An error in this line
// c = 30;
document.write(c + "<br>");

// var (older way, function-scoped)

var message = "Hello, World!";
console.log(message);

// let (block-scoped, recommended for most cases)
let message = "Hello, World!";
console.log(message);

// const (block-scoped, used for constants)
const message = "Hello, World!";
console.log(message);



                            // Data Types
// JavaScript has several data types:

                                    // String: Text data
let name = "technoglobe";
document.write(name + "<br>");




                                    // Number: Numeric data
let age = 25;
document.write(age + "<br>");




                                    // Boolean: True or false
let isStudent = true;
document.write(isStudent + "<br>");




                                // Null: Empty or non-existent value
let emptyValue = null;
document.write(emptyValue + "<br>");



                                // Object: Complex data structures
let person = { firstName: "IT", lastName: "Desk" };
document.write(person[firstName]);

document.write(person.firstName + " " + person.lastName);
console.log(`${person.firstName + person.lastName} ${person.lastName}`); // Output: techno globe



                                // Array: List of values
let numbers = [1, 2, 3, 4, 5];
document.write(numbers + "<br>");

console.log(numbers); // Output: [1, 2, 3, 4, 5]





----------------------------------------------------------------------------------------------------------------------------------------------------





//                                     Operators

// Operators in JavaScript are used to perform operations on variables and values. They are classified into different categories:



Arithmetic Operators



+ (Addition): Adds two numbers.



let a = 5;

let b = 3;

let sum = a + b; // 8





- (Subtraction): Subtracts one number from another.



let difference = a - b; // 2





* (Multiplication): Multiplies two numbers.



let product = a * b; // 15





/ (Division): Divides one number by another.



let quotient = a / b; // 1.6667





% (Modulus): Returns the remainder of a division.



let remainder = a % b; // 2





++ (Increment): Increases a number by one.



let c = 10;

c++; // 11





-- (Decrement): Decreases a number by one.



c--; // 10





Assignment Operators



= (Assignment): Assigns a value to a variable.



let x = 10;





+= (Addition Assignment): Adds a value to a variable.



x += 5; // x = x + 5; // 15





-= (Subtraction Assignment): Subtracts a value from a variable.



x -= 3; // x = x - 3; // 12





*= (Multiplication Assignment): Multiplies a variable by a value.



x *= 2; // x = x * 2; // 24





/= (Division Assignment): Divides a variable by a value.



x /= 4; // x = x / 4; // 6





%= (Modulus Assignment): Applies modulus to a variable.



x %= 3; // x = x % 3; // 0





Comparison Operators



== (Equal to): Checks if two values are equal.

a = 5 ;

b = 5 ;

let isEqual = (a == b); // true





=== (Strict Equal to): Checks if two values and their types are equal.



a = "5" ;

b = 12 ;

let isStrictEqual = (a === b); // false





!= (Not Equal to): Checks if two values are not equal.



let isNotEqual = (a != b); // true





!== (Strict Not Equal to): Checks if two values and their types are not equal.

a = "50" ;

b = 45 ;

let isStrictNotEqual = (a !== b); // true





> (Greater than): Checks if one value is greater than another.

a = 50 ;

b = 45 ;



let isGreater = (a > b); // true





< (Less than): Checks if one value is less than another.

a = 48 ;

b = 45 ;



let isLess = (a < b); // false





>= (Greater than or Equal to): Checks if one value is greater than or equal to another.

a = 48 ;

b = 50 ;



let isGreaterOrEqual = (a >= b); // true





<= (Less than or Equal to): Checks if one value is less than or equal to another.

a = 48 ;

b = 50 ;





let isLessOrEqual = (a <= b); // false





Logical Operators



&& (Logical AND): Returns true if both operands are true.

a = 48 ;

b = 50 ;


                  true      true  = true
                  false      true  = false
                  true      false  = false
                  false      false  = false
let andResult = (a > b  && b > 1 ); // true





|| (Logical OR): Returns true if at least one operand is true.

a = 48 ;

b = 50 ;


                  false      false  = false
                  true      true  = true
                  false      true  = true
                  true      false  = true
let orResult = (a > b || b > 5); // true





! (Logical NOT): Returns true if the operand is false.





let notResult = !(a > b); // false





                    Practical Examples



                  Calculate the Area of a Circle



let radius = 5;

const pi = 3.14159;

let area = pi * radius * radius;

console.log("Area of the circle:", area); // Area of the circle: 78.53975

Document.write();



 


--------------------------------------------------------------------------------





                // 5. Control Structures (Conditionals and Loops)

// Control structures allow you to control the flow of execution in your code. The most common control structures in JavaScript are conditionals and loops.



// Conditionals

// if...else

// The if...else statement executes a block of code if a specified condition is true. If the condition is false, another block of code can be executed.



let age = 20;

if (age >= 18) {

    console.log("You are an adult.");

} else {

    console.log("You are a minor.");

}



// if...else if...else

// The if...else if...else statement allows you to test multiple conditions.



let score = 85;

if (score >= 90) {

    console.log("Grade: A");

} else if (score >= 80) {

    console.log("Grade: B");

} else if (score >= 70) {

    console.log("Grade: C");

} else if (score >= 60) {

    console.log("Grade: D");

} else {

    console.log("Grade: F");

}





                   Check Voting Eligibility

let age = 18;

if (age >= 17) {

    console.log("You are eligible to vote.");

}



else {

    console.log("You are not eligible to vote.");

}






Grade Calculation

let marks = 85;

let grade;

if (marks >= 90) {

    grade = 'A';

} else if (marks >= 80) {

    grade = 'B';

} else if (marks >= 70) {

    grade = 'C';

} else if (marks >= 60) {

    grade = 'D';

} else {

    grade = 'F';

}

console.log("Your grade is:", grade); // Your grade is: B













// switch

// The switch statement executes a block of code based on different cases.

let score = 90;



switch (true) {

    case (score >= 90):

        console.log("A");

        break;

    case (score >= 80):

        console.log("B");

        break;

    case (score >= 70):

        console.log("C");

        break;

    case (score >= 60):

        console.log("D");

        break;

    default:

        console.log("F");

}



let day = 13;

switch (day) {

    case 1:

        console.log("Monday");

        break;

    case 2:

        console.log("Tuesday");

        break;

    case 2:

        console.log("Wednesday");

        break;

    case 4:

        console.log("Thursday");

        break;

    case 5:

        console.log("Friday");

        break;

    case 6:

        console.log("Saturday");

        break;

    case 7:

        console.log("Sunday");

        break;

    

    default:

        console.log("Invalid day");

}



// Loops

// for loop

// The for loop repeats a block of code a specified number of times.



for (let i = 0; i < 5; i++) {

    console.log("Iteration:", i);

}



// while loop

// The while loop repeats a block of code as long as a specified condition is true.



let i = 0;

while (i < 5) {

    document.write("Iteration:", i + "<br>");

    i++;

}



// do...while loop

// The do...while loop is similar to the while loop, but it executes the block of code once before checking the condition.



let i = 0;

do {

    console.log("Iteration:", i);

    i++;

} while (i < 5);



//







// for...in loop

// The for...in loop iterates over the properties of an object.



let person = { firstName: "John", lastName: "Doe", age: 25 };

for (let key in person) {

    console.log(key + ": " + person[key]);

}



// for...of loop

// The for...of loop iterates over iterable objects (like arrays).



let numbers = [1, 2, 3, 4, 5];



for (let number of numbers) {

    document.write(number + "<br>");

}



// Practical Examples

// Check Even or Odd Number

let number = 7;

if (number % 2 === 0) {

    console.log(number + " is even.");

} else {

    console.log(number + " is odd.");

}



// Print Numbers from 1 to 10

for (let i = 1; i <= 10; i++) {

    console.log(i);

}



// Calculate Factorial of a Number

let num = 5;

let factorial = 1;

for (let i = 1; i <= num; i++) {

    factorial *= i;

}

console.log("Factorial of " + num + " is " + factorial); // Factorial of 5 is 120



arr = [1 , 2 ,3]

arr[0] = 1





// Print the Properties of an Object

let car = { make: "Toyota", model: "Corolla", year: 2020 };

for (let key in car) {

    console.log(key + ": " + car[key]);

}



// Iterate Over an Array and Print Values

let fruits = ["Apple", "Banana", "Cherry"];

for (let fruit of fruits) {

    console.log(fruit);

}













// Object: Complex data structures

let person = { firstName: "techno", lastName: "globe" };

document.write(person[firstName]);



document.write(person.firstName + " " + person.lastName);

console.log(`${person.firstName + person.lastName} ${person.lastName}`); // Output: techno globe





------------------------------------------------------------------------------------------




Functions

// Functions in JavaScript are reusable blocks of code that perform a specific task. They allow you to organize your code into manageable pieces and avoid repetition.



// Defining Functions

// Function Declaration

// You can define a function using the function keyword followed by the function name, parameters (optional), and function body enclosed in curly braces {}.



// Function declaration

function greet(name) {

    console.log("Hello, " + name + "!");

}

greet("John");

// Function Expression

// Functions can also be defined using function expressions. These are typically assigned to variables.

// Function expression

let greet = function(name) {

    console.log("Hello, " + name + "!");

};



// Calling Functions

// Once a function is defined, you can call (execute) it by using its name followed by parentheses ().

greet("John"); // Output: Hello, John!









// Function Parameters and Arguments

// Functions can accept parameters (inputs) when they are defined. These parameters act as placeholders for values that are passed to the function when it is called.

function add(a, b) {

    return a + b;

}



let result = add(3, 5);

console.log("Sum:", result); // Output: Sum: 8





// Return Statement

// Functions can return a value using the return statement. Once a return statement is executed, the function stops executing further code

function multiply(a, b) {

    return a * b;

}



let product = multiply(4, 6);

console.log("Product:", product); // Output: Product: 24





// Default Parameters

// ES6 introduced default parameter values for functions. These values are used when the corresponding argument is not passed or is undefined.





greet(); // Output: Hello, Guest!

greet("Alice"); // Output: Hello, Alice!





// Arrow Functions

// Arrow functions provide a more concise syntax for writing functions, especially for one-liners. They also handle the this keyword differently compared to regular functions.

// Regular function

function square(x) {

    return x * x;

}



// Arrow function

let square = (x) => x * x;

document.write(square(5));





let square = (x,y) => x * y;



document.write(square(5 , 10));





// Function Scope

// Variables declared inside a function are local to that function and cannot be accessed outside of it (unless returned).

function example() {

    let message = "Hello";

    console.log(message); // Output: Hello

}



console.log(message); // Error: message is not defined





// Function Hoisting

// Function declarations are hoisted in JavaScript, meaning they are moved to the top of their scope during compilation.

greet("John"); // Output: Hello, John!



function greet(name) {

    console.log("Hello, " + name + "!");

}





                    // Practical Examples

                    // Calculate Power

function power(base, exponent) {

    let result = 1;

    for (let i = 0; i < exponent; i++) {

        result *= base;

    }

    return result;

}



let result = power(2, 3);

console.log("2 raised to the power of 3:", result); // Output: 2 raised to the power of 3: 8



// Convert Fahrenheit to Celsius

function fahrenheitToCelsius(fahrenheit) {

    let celsius = (fahrenheit - 32) * 5 / 9;

    return celsius;

}



let tempF = 68;

let tempC = fahrenheitToCelsius(tempF);

console.log(tempF + "°F is equal to " + tempC.toFixed(2) + "°C"); // Output: 68°F is equal to 20.00°C





// Check if a Number is Prime

function isPrime(number) {

    if (number <= 1) {

        return false;

    }

    for (let i = 2; i <= Math.sqrt(number); i++) {

        if (number % i === 0) {

            return false;

        }

    }

    return true;

}



let num = 17;

if (isPrime(num)) {

    console.log(num + " is a prime number."); // Output: 17 is a prime number.

} else {

    console.log(num + " is not a prime number.");

}





--------------------------------------------------------------------------------------------------------------------------------------







    // 7. Arrays

// Arrays in JavaScript are used to store multiple values in a single variable. They are indexed collections of data where each element can be accessed using an index.


// Creating Arrays

// Arrays can be created using square brackets [] and can hold any type of data.

// Empty array


let emptyArray = [];


// Array with values

let numbers = [1, 2, 3, 4, 5];

let fruits = ["Apple", "Banana", "Cherry"];

let mixedArray = [1, "Hello", true, { name: "John" }];

console.log(mixedArray);


mixedArray.forEach(element => {

    console.log(element);

});


mixedArray.forEach(element => {

    if (typeof element === 'object') {

        document.write(JSON.stringify(element));

    } else {

        console.log(element);

    }

});






// Accessing Array Elements

// Array elements are accessed using zero-based indexing.

let numbers = [1, 2, 3, 4, 5];

console.log(numbers[0]); // Output: 1

console.log(numbers[2]); // Output: 3




// Modifying Array Elements

// You can modify array elements by assigning new values to specific indexes.

let fruits = ["Apple", "Banana", "Cherry"];

fruits[1] = "Orange";

console.log(fruits); // Output: ["Apple", "Orange", "Cherry"]




// Array Length

// The length property returns the number of elements in an array.

let numbers = [1, 2, 3, 4, 5];

console.log(numbers.length); // Output: 5




// Array Methods

// JavaScript provides many built-in methods for working with arrays, such as push(), pop(), shift(), unshift(), slice(), splice(), concat(), join(), indexOf(), forEach(), map(), filter(), reduce(), and more. These methods allow you to manipulate arrays efficiently.

let numbers = [1, 2, 3, 4, 5];


// Add elements to the end of the array

numbers.push(6);

console.log(numbers); // Output: [1, 2, 3, 4, 5, 6]


// Remove the last element from the array

numbers.pop();

console.log(numbers); // Output: [1, 2, 3, 4, 5]


// Remove the first element from the array

numbers.shift();

console.log(numbers); // Output: [2, 3, 4, 5]


// Add elements to the beginning of the array

numbers.unshift(1);

console.log(numbers); // Output: [1, 2, 3, 4, 5]


// Slice part of the array

// slice takes two arguments: start and end (optional).

// start: The index at which to begin extraction (inclusive).

// end: The index at which to end extraction (exclusive).

let slicedArray = numbers.slice(1, 4);

console.log(slicedArray); // Output: [2, 3, 4]


// Splice elements from the array

numbers.splice(2, 1); // Remove 1 element at index 2

console.log(numbers); // Output: [1, 2, 4, 5]


// Concatenate arrays

let moreNumbers = [6, 7, 8];

let combinedArray = numbers.concat(moreNumbers);

console.log(combinedArray); // Output: [1, 2, 4, 5, 6, 7, 8]


// Iterate over array elements with forEach

numbers.forEach(function(element) {

    console.log(element);

});

// Output:

// 1

// 2

// 4

// 5




// Iterating Through Arrays

// You can iterate through arrays using loops like for loop, forEach() method, or other iteration methods like map(), filter(), and reduce().

let numbers = [1, 2, 3, 4, 5];


// Using a for loop

for (let i = 0; i < numbers.length; i++) {

    console.log(numbers[i]);

}


// Using forEach method

numbers.forEach(function(element) {

    console.log(element);

});


// Using map method

let arr = function(num) {

    return num * num;

}

let squaredNumbers = numbers.map(arr);

console.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]


// Convert Array of Strings to Upper Case:

let fruits = ["apple", "banana", "cherry"];


let upperCaseFruits = fruits.map(fruit => fruit.toUpperCase());


console.log(upperCaseFruits); // Output: ["APPLE", "BANANA", "CHERRY"]


// Extract Specific Property from Object

let users = [

  { name: "John", age: 25 },

  { name: "Jane", age: 30 },

  { name: "Mike", age: 35 }

];


let names = users.map(user => user.name);


console.log(names); // Output: ["John", "Jane", "Mike"]


// Transform Numbers in an Array:

let numbers = [1, 4, 9, 16];


let roots = numbers.map(num => Math.sqrt(num));


console.log(roots); // Output: [1, 2, 3, 4]


// Practical Examples

// Find Maximum Number in an Array

let numbers = [5, 2, 9, 12, 7];


let maxNumber = Math.max(...numbers);


console.log(maxNumber); // Output: 9


// by function

function findMax(arr) {

    let max = arr[0];

    for (let i = 1; i < arr.length; i++) {

        if (arr[i] > max) {

            max = arr[i];

        }

    }

    return max;

}


let numbers = [5, 2, 9, 1, 7];

let maxNumber = findMax(numbers);

console.log("Maximum number:", maxNumber); // Output: Maximum number: 9


// Sum of Array Elements

function sumArray(arr) {

    let sum = 0;

    for (let num of arr) {

        sum += num;

    }

    return sum;

}


let numbers = [1, 2, 3, 4, 5];

let totalSum = sumArray(numbers);

console.log("Sum of array:", totalSum); // Output: Sum of array: 15


// Check if Array Contains a Specific Element

function containsElement(arr, element) {

    return arr.includes(element);

}


let fruits = ["Apple", "Banana", "Cherry"];

console.log(containsElement(fruits, "Banana")); // Output: true

console.log(containsElement(fruits, "Orange")); // Output: false






// minimum and maximum numbers in an array using a simple loop.

let numbers = [1, 2, 3, 4, 5];


function findMinAndMax(arr) {

  let min = arr[0];

  let max = arr[0];


  for (let i = 1; i < arr.length; i++) {

    if (arr[i] < min) {

      min = arr[i];

    }

    if (arr[i] > max) {

      max = arr[i];

    }

  }


  return { min, max };

}


let result = findMinAndMax(numbers);


console.log("Min:", result.min); // Output: Min: 1

console.log("Max:", result.max); // Output: Max: 5




------------------------------------------------------------------------------------------------



//  Objects

// Objects in JavaScript are collections of key-value pairs. They are used to store complex data and are one of the fundamental data structures in the language.



// Creating Objects

// Objects are created using curly braces {} and contain properties (key-value pairs).

// Empty object

let emptyObject = {};



// Object with properties

let person = {

    firstName: "John",

    lastName: "Doe",

    age: 30,

    isStudent: false,

    greet: function() {

        return "Hello, " + this.firstName + "!";

    }

};







// Accessing Object Properties

// Object properties can be accessed using dot notation (object.property) or bracket notation (object["property"]).

console.log(person.firstName); // Output: John

console.log(person["lastName"]); // Output: Doe





// Modifying Object Properties

// You can modify object properties by assigning new values to them.

person.age = 35;

console.log(person.age); // Output: 35





// Adding and Removing Object Properties

// You can add new properties to an object by simply assigning a value to a new key.

person.city = "New York";

console.log(person.city); // Output: New York





// You can remove a property from an object using the delete keyword.

delete person.isStudent;

console.log(person); // Output: { firstName: "John", lastName: "Doe", age: 35, greet: function() { return "Hello, John!"; }, city: "New York" }





// Object Methods

// Objects can also contain methods (functions stored as object properties).

console.log(person.greet()); // Output: Hello, John!





// Object Iteration

// You can iterate over object properties using for...in loop or Object.keys(), Object.values(), or Object.entries() methods.

for (let key in person) {

    console.log(key + ": " + person[key]);

}

// Output:

// firstName: John

// lastName: Doe

// age: 35

// greet: function() { return "Hello, John!"; }

// city: New York



for (let key in person) {

    if (typeof(person[key]) === 'function') {

        document.write(person[key]() + "<br>"); // Call the function here

    } else {

        document.write(key + ": " + person[key] + "<br>");

    }

}

// output

// firstName: John

// lastName: Doe

// age: 30

// isStudent: false

// Hello, John!



// Object Constructor

// You can create objects using a constructor function and new keyword.



class Car {

    constructor(make, model, year) {

        this.make = make;

        this.model = model;

        this.year = year;

    }

}



let myCar = new Car("Toyota", "Camry", 2020);

console.log(myCar); // Output: Car { make: "Toyota", model: "Camry", year: 2020 }

// document.write(myCar.model); // Output: Car { make: "Toyota", model: "Camry", year: 2020 }

// for (let key in myCar) {

//     document.write(key + ": " + myCar[key] + "<br>");

// }






------------------------------------------------------------------------------------------------






// DOM (Document Object Model) manipulation in JavaScript involves interacting with and modifying the structure, style, and content of a webpage. The DOM represents the document as a tree of nodes, where each node corresponds to part of the page.

// Key Parts of the DOM
// Document Node: This is the root of the DOM tree. It represents the entire HTML document.

// Element Nodes: These nodes represent HTML elements (like <div>, <p>, <a>, etc.). They can have attributes and child nodes.

// Text Nodes: These nodes represent the text inside an element. For example, in <p>Hello</p>, "Hello" is a text node.

// Attribute Nodes: These nodes represent attributes of elements (like class, id, href, etc.).

// Comment Nodes: These nodes represent comments within the HTML.

// Practical Examples of DOM Manipulation
// 1. Selecting Elements
// To manipulate elements, you first need to select them. Common methods include:

// document.getElementById('id'): Selects an element by its ID.
// document.getElementsByClassName('class'): Selects elements by their class name.
// document.getElementsByTagName('tag'): Selects elements by their tag name.
// document.querySelector('selector'): Selects the first element that matches a CSS selector.
// document.querySelectorAll('selector'): Selects all elements that match a CSS selector.


// Example:

//                                   1. Selecting Elements by ID
<body>

<h2>My First Page</h2>

<p id="demo"></p>
</body>

document.getElementById("demo").innerHTML = "Hello World!";

// **Understanding the HTML DOM Document Object**

// The document object represents your web page.

// To interact with any part of an HTML page, you always start by accessing the document object.

// Here are some ways to use the document object to work with HTML:

// **Finding HTML Elements**
// - `document.getElementById(id)`              : Find an element by its ID.
// - `document.getElementsByTagName(name)`      : Find elements by their tag name.
// - `document.getElementsByClassName(name)`    : Find elements by their class name.

// **Changing HTML Elements**
// - `element.innerHTML = new html content`     : Update the content inside an element.
// - `element.attribute = new value`            : Change the value of an attribute in an element.
// - `element.style.property = new style`       : Update the style of an element.
// - `element.setAttribute(attribute, value)`   : Set a new value for an attribute in an element.

// **Adding and Removing Elements**
// - `document.createElement(element)`          : Create a new HTML element.
// - `document.removeChild(element)`            : Remove an HTML element.
// - `document.appendChild(element)`            : Add a new HTML element.
// - `document.replaceChild(new, old)`          : Replace an old HTML element with a new one.
// - `document.write(text)`                     : Write text directly into the HTML document.




// example
<body>
    <h1 id="title">Hello, World!</h1>
    <button id="changeText">Change Text</button>
    <script src="script.js">

    </script>
</body>



// JavaScript (script.js):

// Select the element with the ID 'title'
const titleElement = document.getElementById('title');

// Select the element with the ID 'changeText'
const buttonElement = document.getElementById('changeText');

// Add an event listener to the button
buttonElement.addEventListener('click', () => {
    // Change the text content of the title element
    titleElement.textContent = 'Text Changed!';
});


//                           2. Selecting Elements by Class Name

<body>
    <div class="box">Box 1</div>
    <div class="box">Box 2</div>
    <div class="box">Box 3</div>
    <button id="highlightBoxes">Highlight Boxes</button>
</body>

// JavaScript (script.js):

// Select all elements with the class 'box'
const boxes = document.getElementsByClassName('box');

// Select the button element
const highlightButton = document.getElementById('highlightBoxes');

// Add an event listener to the button
highlightButton.addEventListener('click', () => {
    // Loop through each box and change its background color
    for (const box of boxes) {
        box.style.backgroundColor = 'yellow';
    }
});


//                               3. Selecting Elements by Tag Name

<body>
    <p>Paragraph 1</p>
    <p>Paragraph 2</p>
    <p>Paragraph 3</p>
    <button id="highlightParagraphs">Highlight Paragraphs</button>
</body>

// JavaScript (script.js):


// Select all <p> elements
const paragraphs = document.getElementsByTagName('p');

// Select the button element
const highlightParagraphsButton = document.getElementById('highlightParagraphs');

// Add an event listener to the button
highlightParagraphsButton.addEventListener('click', () => {
    // Loop through each paragraph and change its color
    for (const paragraph of paragraphs) {
        paragraph.style.color = 'blue';
    }
});



//                               4. Selecting Elements by Query Selector
// If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.
// This example returns a list of all <p> elements with class="intro".

<body>
    <div class="container">
        <p class="text">First paragraph</p>
        <p class="text">Second paragraph</p>
        <p class="text">Third paragraph</p>
    </div>
    <button id="changeTextColor">Change Text Color</button>
</body>

// JavaScript (script.js):

// Select the first element with the class 'text'
const firstTextElement = document.querySelector('.text');

// Select all elements with the class 'text'
const allTextElements = document.querySelectorAll('.text');

// Select the button element
const changeTextColorButton = document.getElementById('changeTextColor');

// Add an event listener to the button
changeTextColorButton.addEventListener('click', () => {
    // Loop through all text elements and change their color
    allTextElements.forEach(textElement => {
        textElement.style.color = 'red';
    });
});

// example:1 for querySelector
<body>
<h2>JavaScript HTML DOM</h2>

<p>Finding HTML Elements by Query Selector</p>
<p class="intro">Hello World!.</p>
<p class="intro">This example demonstrates the <b>querySelectorAll</b> method.</p>

<p id="demo"></p>
</body>

const x = document.querySelector("p.intro");
document.getElementById("demo").innerHTML = 
 x.innerHTML + "<br> this is an example of querySelector";



// Example:2 for querySelectorAll
<body>
<h2>JavaScript HTML DOM</h2>

<p>Finding HTML Elements by Query Selector</p>
<p class="intro">Hello World!.</p>
<p class="intro">This example demonstrates the <b>querySelectorAll</b> method.</p>

<p id="demo"></p>

</body>

const x = document.querySelectorAll("p.intro");
document.getElementById("demo").innerHTML = 
'The first paragraph (index 0) with class="intro" is: ' + x[0].innerHTML;


// example:3 querySelectorAll
<body>
    <div class="container">
        <p class="text">First paragraph</p>
        <p class="text">Second paragraph</p>
        <p class="text">Third paragraph</p>
    </div>
       <p id="demo">Third paragraph</p>
</body>
   
        // Selecting all elements with the class 'text'
        let x = document.querySelectorAll('.text');
        
     
        document.getElementById("demo").innerHTML = 
		'The first paragraph (index 0) with class="intro" is: ' + x[0].innerHTML;
         x.forEach((paragraph) => {
            document.write(`${paragraph.textContent + "<br>"}`);
        });
 
// example 4:

    // <style>
        .highlight {
            background-color: yellow;
        }
    // </style>

<body>
    <h1>Example Page</h1>
    <p class="info">This is the first paragraph.</p>
    <p class="info">This is the second paragraph.</p>
    <p>This is a regular paragraph.</p>
    <button id="highlightButton">Highlight Text</button>

</body>

        // Select the button element
        let button = document.querySelector('#highlightButton');

        // Add an event listener to the button
        button.addEventListener('click', () => {
            // Select the first paragraph with the class 'info'
            let firstInfoParagraph = document.querySelector('.info');
            firstInfoParagraph.classList.add('highlight');

            // Select all paragraphs with the class 'info'
            let allInfoParagraphs = document.querySelectorAll('.info');
            allInfoParagraphs.forEach(paragraph => {
                paragraph.classList.add('highlight');
            });
        });





// Summary
// By ID: Use document.getElementById('id') to select a single element by its ID.
// By Class Name: Use document.getElementsByClassName('className') to select multiple elements by their class name.
// By Tag Name: Use document.getElementsByTagName('tagName') to select elements by their tag name.
// By Query Selector: Use document.querySelector('selector') to select the first element that matches a CSS selector, or document.querySelectorAll('selector') to select all elements that match.


<body>
    <p id="myParagraph">Hello, World!</p>
    <button id="changeText">Change Text</button>
</body>

        // Select elements
        const paragraph = document.getElementById('myParagraph');
        const button = document.getElementById('changeText');

        // Add an event listener to the button
        button.addEventListener('click', () => {
            // Change the text of the paragraph
            paragraph.textContent = 'Text changed!';
        });





------------------------------------------------------------------------------------------------

//                       Creating and Appending Elements

// You can create new elements and append them to the DOM.



// Example:1



<body>

    <div id="container"></div>

    <button id="addElement">Add Element</button>

</body>

 

        const container = document.getElementById('container');

        const button = document.getElementById('addElement');



        button.addEventListener('click', () => {

            // Create a new paragraph element

            const newParagraph = document.createElement('p');

            newParagraph.textContent = 'A new paragraph!';

            

            // Append the new element to the container

            container.appendChild(newParagraph);

        });

 

// example:2



<body>

    <div id="appendcontainer"></div>

    <div id="prependcontainer"></div>

    <button id="addappendElement">Add append Element</button> <br>

    <button id="addprependElement">Add prepend Element</button>

   </body>





        const prependcontainer = document.getElementById('prependcontainer');

        const prependbutton = document.getElementById('addprependElement');



        prependbutton.addEventListener('click', () => {

            // Create a new paragraph element

            const newParagraph = document.createElement('p');

            newParagraph.textContent = 'A new prepend paragraph!';

            

            // Prepend the new element to the container

            prependcontainer.prepend(newParagraph);

        });



        const appendcontainer = document.getElementById('appendcontainer');

        const appendbutton = document.getElementById('addappendElement');



        appendbutton.addEventListener('click', () => {

            // Create a new paragraph element

            const newappendParagraph = document.createElement('p');

            newappendParagraph.textContent = 'A new append paragraph!';

            

            // Append the new element to the container

            appendcontainer.appendChild(newappendParagraph);

        });









//                                        6. Modifying Attributes

// You can change the attributes of an element.



// Example:





<body>

    <img id="myImage" src="image.jpg" alt="Old Image">

    <button id="changeImage">Change Image</button>

</body>



        const image = document.getElementById('myImage');

        const button = document.getElementById('changeImage');



        button.addEventListener('click', () => {

            // Change the source and alt attributes of the image

            image.src = 'new-image.jpg';

            image.alt = 'New Image';

        });



{/*                              7. Removing Elements 

You can also remove elements from the DOM.  */}



{/* Example: */}





<body>

    <div id="toBeRemoved">This will be removed.</div>

    <button id="removeElement">Remove Element</button>

</body>



        const element = document.getElementById('toBeRemoved');

        const button = document.getElementById('removeElement');



        button.addEventListener('click', () => {

            // Remove the element from the DOM

            element.remove();

        });



{/* Example: */}



<body>

    <form id="myForm">

    <input type="text" id="nameInput" placeholder="Enter your name">

    <button type="submit">Submit</button>

</form>

<p id="greeting"></p>



 </body>



   document.getElementById('myForm').addEventListener('submit', (event) => {

    event.preventDefault();

    const nameInput = document.getElementById('nameInput').value;

    const greeting = document.getElementById('greeting');

    greeting.textContent = `Hello, ${nameInput}` ;

});





                                                        {/* Example: hide and show */}

        <style>

        .text {

            display: block;

        }

        .hidden {

            display: none; /* Yeh class use karenge */

        }

    </style>



    <p id="text" class="text">click</p>

    <button onclick="hidefunc()">hide paragraph</button>



    <script>

        function hidefunc() {

            let para = document.getElementById("text");

            para.classList.add("hidden"); // Class add kar rahe hain

        }

    </script>



-------------------------------------------------------------------------------------------

**`innerHTML`**, **`innerText`**, aur **`textContent`** teen tarike hain kisi HTML element ke andar ki value ko read ya update karne ke liye. Inka kaam thoda alag hota hai
---




1. `innerHTML`
Yeh property kisi element ke andar ke HTML content ko represent karti hai. Agar aapko element ke andar HTML tags bhi chahiye ya naya HTML add karna hai, toh aap `innerHTML` ka use karte hain.  

#### Example:


<div id="myDiv"><b>Welcome</b> to my page!</div>


<script>
  let div = document.getElementById("myDiv");

  // Reading innerHTML
  console.log(div.innerHTML); // Output: <b>Welcome</b> to my page!

  // Updating innerHTML
  div.innerHTML = "<i>Hello</i>, User!";
</script>

 

innerHTML mai HTML tags maintain hote hain. 

---

2. `innerText`
Yeh property screen par dikhte hue text ko represent karti hai. Agar HTML tags hain, toh wo ignore ho jaate hain aur sirf visible text milta hai.  

#### Example:
<div id="myDiv"><b>Welcome</b> to my page!</div>

<script>
  let div = document.getElementById("myDiv");

  // Reading innerText
  console.log(div.innerText); // Output: Welcome to my page!

  // Updating innerText
  div.innerText = "Hello, User!";
</script>

  

innerTextYeh visible text ko show karta hai aur tags ko hatata hai.  

---

3. `textContent
Yeh property kisi element ka pure text deti hai, chahe wo screen par visible ho ya na ho. Yeh tags ko completely ignore karta hai.  

#### Example:
<div id="myDiv"><b>Welcome</b> to my page!</div>


<script>
  let div = document.getElementById("myDiv");

  // Reading textContent
  console.log(div.textContent); // Output: Welcome to my page!

  // Updating textContent
  div.textContent = "Hello, User!";
</script>


textContent tags ko completely remove karta hai, chahe wo visible ho ya nahi.  

---

### **Comparison Table**:

| **Property**      | **HTML Tags Handle Karta Hai?** | **Visible Text Deta Hai?** | **Hidden   Text Include Karta Hai?** |
|--------------------|---------------------------------|----------------------------|-------------------------------------|
| `innerHTML`        | Yes                             | Yes                        | Yes                                 |
| `innerText`        | No                              | Yes                        | No                                  |
| `textContent`      | No                              | Yes                        | Yes                                 |

---

**Real-World Usage:**
1. Agar aapko dynamic HTML insert karna ho (e.g., `<p>`, `<b>` tags), toh `innerHTML` use karein.  
2. Sirf dikhte hue text ko access/update karne ke liye `innerText` use karein.  
3. Pure text (chahe visible ho ya na ho) ke liye `textContent` use karein.

Events

// Events in JavaScript allow you to respond to user interactions and browser actions.



// Event Handling

// You can handle events using event listeners (addEventListener) to execute code when an event occurs (click, hover, submit).

<!DOCTYPE html>

<html>

<head>

    <title>Event Handling Example</title>

</head>

<body>

    <button id="myButton">Click me</button>



    <script>

        let button = document.getElementById('myButton');



        button.addEventListener('click', function() {

            alert('Button clicked!');

        });

    </script>

</body>

</html>





// Event Types

// Common event types include click, mouseover, keydown, submit, load, DOMContentLoaded, etc.

document.addEventListener('DOMContentLoaded', function() {

    console.log('DOM fully loaded and parsed');

});



window.addEventListener('resize', function() {

    console.log('Window resized');

});



// Events are actions or occurrences that happen in the browser, such as a user clicking a button, submitting a form, or loading a webpage. JavaScript can respond to these events by executing specific functions, known as event handlers.



// Here's a list of common events and practical examples for each:



// Click Event

// Mouse Events (mouseover, mouseout, mousemove, mousedown, mouseup)

// Keyboard Events (keydown, keyup, keypress)

// Form Events (submit, change, focus, blur)

// Window Events (load, resize, scroll, unload)



// 1. Click Event



<!DOCTYPE html>

<html>

<head>

    <title>Click Event Example</title>

    <script>

        function handleClick() {

            alert('Button was clicked!');

        }

    </script>

</head>

<body>

    <button onclick="handleClick()">Click Me</button>

</body>

</html>





2. Mouse Events

Mouseover and Mouseout



<!DOCTYPE html>

<html>

<head>

    <title>Mouseover and Mouseout Example</title>

    <script>

        function handleMouseOver() {

            document.getElementById('message').innerText = 'Mouse is over the div!';

        }

        function handleMouseOut() {

            document.getElementById('message').innerText = 'Mouse is outside the div!';

        }

    </script>

</head>

<body>

    <div onmouseover="handleMouseOver()" onmouseout="handleMouseOut()" style="width: 200px; height: 100px; background-color: lightblue;">

        Hover over me!

    </div>

    <p id="message">Mouse is outside the div!</p>

</body>

</html>





Mousemove



<!DOCTYPE html>

<html>

<head>

    <title>Mousemove Example</title>

    <script>

        function handleMouseMove(event) {

            document.getElementById('coordinates').innerText = `X: ${event.clientX}, Y: ${event.clientY}`;

        }

    </script>

</head>

<body onmousemove="handleMouseMove(event)">

    <p>Move your mouse around!</p>

    <p id="coordinates">X: 0, Y: 0</p>

</body>

</html>







3. Keyboard Events

Keydown, Keyup, and Keypress



<!DOCTYPE html>

<html>

<head>

    <title>Keyboard Events Example</title>

    <script>

        function handleKeyDown(event) {

            document.getElementById('key').innerText = `Key Down: ${event.key}`;

        }

        function handleKeyUp(event) {

            document.getElementById('key').innerText = `Key Up: ${event.key}`;

        }

        function handleKeyPress(event) {

            document.getElementById('key').innerText = `Key Press: ${event.key}`;

        }

    </script>

</head>

<body onkeydown="handleKeyDown(event)" onkeyup="handleKeyUp(event)" onkeypress="handleKeyPress(event)">

    <p>Press any key!</p>

    <p id="key">Key: None</p>

</body>

</html>







4. Form Events

Submit



<!DOCTYPE html>

<html>

<head>

    <title>Form Submit Example</title>

    <script>

        function handleSubmit(event) {

            event.preventDefault();

            alert('Form submitted!');

        }

    </script>

</head>

<body>

    <form onsubmit="handleSubmit(event)">

        <input type="text" name="name" placeholder="Enter your name" >

        <button type="submit">Submit</button>

    </form>

</body>

</html>



Change



<!DOCTYPE html>

<html>

<head>

    <title>Change Event Example</title>

    <script>

        function handleChange(event) {

            alert(`Value changed to: ${event.target.value}`);

        }

    </script>

</head>

<body>

    <input type="text" onchange="handleChange(event)" placeholder="Type something">

</body>

</html>















Focus and Blur



<!DOCTYPE html>

<html>

<head>

    <title>Focus and Blur Event Example</title>

    <script>

        function handleFocus() {

            document.getElementById('message').innerText = 'Input is focused!';

        }

        function handleBlur() {

            document.getElementById('message').innerText = 'Input lost focus!';

        }

    </script>

</head>

<body>

    <input type="text" onfocus="handleFocus()" onblur="handleBlur()" placeholder="Focus on me">

    <p id="message">Input is not focused.</p>

</body>

</html>







5. Window Events

Load



<!DOCTYPE html>

<html>

<head>

    <title>Window Load Event Example</title>

    <script>

        window.onload = function() {

            alert('Window loaded!');

        }

    </script>

</head>

<body>

    <p>The window load event will trigger an alert when the page is fully loaded.</p>

</body>

</html>







Resize

<!DOCTYPE html>

<html>

<head>

    <title>Window Resize Event Example</title>

    <script>

        window.onresize = function() {

            document.getElementById('size').innerText = `Width: ${window.innerWidth}, Height: ${window.innerHeight}`;

        }

    </script>

</head>

<body>

    <p>Resize the window to see the dimensions change.</p>

    <p id="size">Width: 0, Height: 0</p>

</body>

</html>







Scroll

<!DOCTYPE html>

<html>

<head>

    <title>Window Scroll Event Example</title>

    <script>

        window.onscroll = function() {

            document.getElementById('scroll').innerText = `Scroll Position: ${window.scrollY}`;

        }

    </script>

</head>

<body style="height: 2000px;">

    <p>Scroll down to see the scroll position.</p>

    <p id="scroll">Scroll Position: 0</p>

</body>

</html>








-------------------------------------------------------------------------------------------------------------------------




     table, th, td {

            border: 1px solid black;

            border-collapse: collapse;

            padding: 8px;

        }

        th, td {

            width: 100px;

            text-align: center;

        }





<body>

    <button onclick="addRow()">Add Row</button>

    <button onclick="addColumn()">Add Column</button>

    <table id="dynamicTable">

        <tr>

            <th>Header 1</th>

            <th>Header 2</th>

        </tr>

        <tr>

            <td contenteditable="true">Cell 1</td>

            <td contenteditable="true">Cell 2</td>

        </tr>

    </table>



 

</body>



function addRow() {

    const table = document.getElementById('dynamicTable');

    const row = table.insertRow();

    for (let i = 0; i < table.rows[0].cells.length; i++) {

        const cell = row.insertCell();

        cell.textContent = `Cell ${table.rows.length - 1}.${i + 1}`;

        cell.contentEditable = "true";

    }

}



function addColumn() {

    const table = document.getElementById('dynamicTable');

    const headerRow = table.rows[0];

    const headerCell = document.createElement('th');

    headerCell.textContent = `Header ${headerRow.cells.length + 1}`;

    headerRow.appendChild(headerCell);



    for (let i = 1; i < table.rows.length; i++) {

        const cell = table.rows[i].insertCell();

        cell.textContent = `Cell ${i}.${table.rows[i].cells.length}`;

        cell.contentEditable = "true";

    }

}





{/* Example 2: Real-time Search Filter */}

  

        .hidden {

            display: none;

        }





<body>

    <input type="text" id="searchInput" placeholder="Search...">

    <ul id="itemList">

        <li>Apple</li>

        <li>Banana</li>

        <li>Cherry</li>

        <li>Date</li>

        <li>Elderberry</li>

    </ul>

 

</body>



document.getElementById('searchInput').addEventListener('input', function() {

    const filter = this.value.toLowerCase();

    const items = document.getElementById('itemList').getElementsByTagName('li');

    Array.from(items).forEach(function(item) {

        if (item.textContent.toLowerCase().includes(filter)) {

            item.classList.remove('hidden');

        } else {

            item.classList.add('hidden');

        }

    });

});





{/* Example 3: Image Gallery with Lightbox Effect */}

     { please remove this line

      .gallery img {

            width: 100px;

            cursor: pointer;

        }

        .lightbox {

            display: none;

            position: fixed;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            background: rgba(0, 0, 0, 0.8);

            justify-content: center;

            align-items: center;

        }

        .lightbox img {

            max-width: 80%;

            max-height: 80%;

        }

        please remove this line }

    

<body>

    <div class="gallery">

        <img src="image1.jpg" alt="Image 1">

        <img src="image2.jpg" alt="Image 2">

        <img src="image3.jpg" alt="Image 3">

    </div>

    <div class="lightbox" id="lightbox">

        <img src="" alt="Lightbox Image" id="lightboxImg">

    </div>





</body>

     

{please remove this line



const gallery = document.querySelector('.gallery');

const lightbox = document.getElementById('lightbox');

const lightboxImg = document.getElementById('lightboxImg');



gallery.addEventListener('click', function(event) {

    if (event.target.tagName === 'IMG') {

        lightboxImg.src = event.target.src;

        lightbox.style.display = 'flex';

    }

});



lightbox.addEventListener('click', function() {

    lightbox.style.display = 'none';

});




